//
//  JSONLoader.swift
//  GoDelivery
//
//  Created by –ì–∏–¥–∞—è—Ç –î–∂–∞–Ω–∞–µ–≤–∞ on 05.01.2025.
//

import UIKit
import CoreLocation
import MapKit

// MARK: - JSONLoader: –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–∑ JSON
class JSONLoader {
    
    static func loadRestaurants(completion: @escaping ([Restaurant]) -> Void) {
        DispatchQueue.global(qos: .background).async {
            guard let url = Bundle.main.url(forResource: "Restaurant", withExtension: "json"),
                  let data = try? Data(contentsOf: url) else {
                print("–û—à–∏–±–∫–∞: JSON-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                DispatchQueue.main.async { completion([]) }
                return
            }
            
            do {
                let restaurants = try JSONDecoder().decode([Restaurant].self, from: data)
                DispatchQueue.main.async { completion(restaurants) }
            } catch {
                print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: \(error)")
                DispatchQueue.main.async { completion([]) }
            }
        }
    }
}

protocol ServerDelegate: AnyObject {
    func didFetchRestaurants(_ restaurants: [Restaurant])
}

// MARK: - NearbyRestaurantsService: –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
class NearbyRestaurantsService {
    
    weak var delegate: ServerDelegate?
    private let locationModel = LocationModel()
    
    init() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        locationModel.onLocationUpdate = { [weak self] location in
            print("üîπ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: \(location.coordinate.latitude), \(location.coordinate.longitude)")
            self?.fetchNearbyRestaurants(with: location)
        }
        
        locationModel.onLocationError = { error in
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: \(error.localizedDescription)")
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        locationModel.requestCurrentLocation()
    }
    
    func fetchNearbyRestaurants(with location: CLLocation) {
        let searchQueries = ["Restaurant", "Cafe"]
        var allRestaurants: [Restaurant] = []
        let group = DispatchGroup()  // –ì—Ä—É–ø–ø–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤

        for query in searchQueries {
            let request = MKLocalSearch.Request()
            request.naturalLanguageQuery = query
            request.region = MKCoordinateRegion(
                center: location.coordinate,
                latitudinalMeters: 1000,
                longitudinalMeters: 1000
            )

            let search = MKLocalSearch(request: request)
            group.enter()  // –í—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            search.start { [weak self] (response, error) in
                defer { group.leave() }  // –í—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
                
                if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: \(error.localizedDescription)")
                    return
                }

                guard let response = response else {
                    print("‚ùå –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø—É—Å—Ç.")
                    return
                }

                let mapRestaurants = response.mapItems.map { mapItem -> Restaurant in
                    let distance = location.distance(from: mapItem.placemark.location ?? location)
                    return Restaurant(
                        name: mapItem.name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                        cuisineType: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                        imageName: "",
                        rating: 0,
                        deliveryTime: Int.random(in: 10...60),
                        distance: distance / 1000 // –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
                    )
                }
                allRestaurants.append(contentsOf: mapRestaurants)
            }
        }

        // –ö–æ–≥–¥–∞ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º combineData
        group.notify(queue: .main) { [weak self] in
            let uniqueRestaurants = Array(Set(allRestaurants))
            self?.combineData(with: uniqueRestaurants)
        }
    }
    
//    func fetchNearbyRestaurants(with location: CLLocation) {
//        //        let pointOfInterestFilter = MKPointOfInterestFilter(
//        //            including: [.restaurant, .cafe]
//        //        )
//        //        print(pointOfInterestFilter)
//        let searchQueries = ["Restaurant", "Cafe"]
//        var allRestaurants: [Restaurant] = []
//        
//        
//        for query in searchQueries {
//            let request = MKLocalSearch.Request()
//            request.naturalLanguageQuery = query
//            request.region = MKCoordinateRegion(
//                center: location.coordinate,
//                latitudinalMeters: 1000,
//                longitudinalMeters: 1000
//            )
//
//            
//            let search = MKLocalSearch(request: request)
//            search.start { [weak self] (response, error) in
//                if let error = error {
//                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: \(error.localizedDescription)")
//                    return
//                }
//                
//                guard let response = response else {
//                    print("‚ùå –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø—É—Å—Ç.")
//                    return
//                }
//                
//                
//                let mapRestaurants = response.mapItems.map { mapItem -> Restaurant in
//                    let distance = location.distance(from: mapItem.placemark.location ?? location)
//                    return Restaurant(
//                        name: mapItem.name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
//                        cuisineType: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
//                        imageName: "",
//                        rating: 0,
//                        deliveryTime: Int.random(in: 10...60),
//                        distance: distance / 1000 // –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
//                    )
//                }
//                allRestaurants.append(contentsOf: mapRestaurants)
//
//                self?.combineData(with: allRestaurants)
//            }
//        }
//        
//    }
    
    private func combineData(with mapRestaurants: [Restaurant]) {
        JSONLoader.loadRestaurants { jsonRestaurants in
            var combinedRestaurants: [Restaurant] = []

            for mapRestaurant in mapRestaurants {
                if let jsonRestaurant = jsonRestaurants.first(where: {
                    $0.name.lowercased().trimmingCharacters(in: .whitespaces) ==
                    mapRestaurant.name.lowercased().trimmingCharacters(in: .whitespaces)
                }) {
                    combinedRestaurants.append(Restaurant(
                        name: mapRestaurant.name,
                        cuisineType: jsonRestaurant.cuisineType,
                        imageName: jsonRestaurant.imageName,
                        rating: jsonRestaurant.rating,
                        deliveryTime: mapRestaurant.deliveryTime,
                        distance: mapRestaurant.distance
                    ))
                }
            }

            print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:")
            combinedRestaurants.forEach { restaurant in
                print("üçΩ \(restaurant.name) | –ö—É—Ö–Ω—è: \(restaurant.cuisineType) | –†–µ–π—Ç–∏–Ω–≥: \(restaurant.rating) | üìç \(restaurant.distance) –∫–º | ‚è≥ \(restaurant.deliveryTime) –º–∏–Ω")
            }

            DispatchQueue.main.async {
                self.delegate?.didFetchRestaurants(combinedRestaurants)
            }
        }
    }
    
//    private func combineData(with mapRestaurants: [Restaurant]) {
//        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
//        let jsonRestaurants = JSONLoader.loadRestaurants()
//        
//        var combinedRestaurants: [Restaurant] = []
//
//        for mapRestaurant in mapRestaurants {
//            // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
//            if let jsonRestaurant = jsonRestaurants.first(where: { $0.name.lowercased().trimmingCharacters(in: .whitespaces) == mapRestaurant.name.lowercased().trimmingCharacters(in: .whitespaces) }) {
//                combinedRestaurants.append(Restaurant(
//                    name: mapRestaurant.name,
//                    cuisineType: jsonRestaurant.cuisineType,
//                    imageName: jsonRestaurant.imageName,
//                    rating: jsonRestaurant.rating,
//                    deliveryTime: mapRestaurant.deliveryTime,
//                    distance: mapRestaurant.distance
//                ))
//            }
//        }
//
//        print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:")
//        combinedRestaurants.forEach { restaurant in
//            print("üçΩ \(restaurant.name) | –ö—É—Ö–Ω—è: \(restaurant.cuisineType) | –†–µ–π—Ç–∏–Ω–≥: \(restaurant.rating) | üìç \(restaurant.distance) –∫–º | ‚è≥ \(restaurant.deliveryTime) –º–∏–Ω")
//        }
//
//        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
//        delegate?.didFetchRestaurants(combinedRestaurants)
//    }
//    

}

